{
  "defaultTemplateVars": {
    "env": "local",
    "tag": "dev",
    "local": "local",
    "libs-dir": "src/libs",
    "bins-dir": "src/bins",
    "models-deployment": "mlhub-models-api-deployment",
    "models-image": "tapis/models-api",
    "datasets-deployment": "mlhub-datasets-api-deployment",
    "datasets-image": "tapis/datasets-api",
    "inference-deployment": "mlhub-inference-api-deployment",
    "inference-image": "tapis/inference-api",
    "training-deployment": "mlhub-training-api-deployment",
    "training-image": "tapis/training-api",
    "artifact-db-deployment": "mlhub-artifact-db-deployment",
    "nfs-deployment": "mlhub-nfs-server-deployment",
    "nfs-server-service": "mlhub-nfs-server-service",
    "traefik-deployment": "mlhub-traefik-deployment",
    "artifact-ingester-deployment": "mlhub-artifact-ingester-deployment",
    "artifact-ingester-image": "tapis/mlhub-artifact-ingester",
    "artifact-publisher-deployment": "mlhub-artifact-publisher-deployment",
    "artifact-publisher-image": "tapis/mlhub-artifact-publisher"
  },
  "components": [
    {
      "name": "models",
      "rootDir": "src/apis/models",
      "labels": ["api"],
      "commands": {
        "initialize": "chmod -R +x {{ self.rootDir }}/scripts && {{ self.commands.buildl }} && {{ self.commands.start }}",
        "get-nfs-ip": "kubectl get service {{ nfs-server-service }} -o jsonpath='{.spec.clusterIP}'",
        "start": "{{ self.rootDir }}/scripts/burnup.sh {{ self.rootDir }} $(kubectl get service {{ nfs-server-service }} -o jsonpath='{.spec.clusterIP}')",
        "stop": "{{ self.rootDir }}/scripts/burndown.sh {{ self.rootDir }} $(kubectl get service {{ nfs-server-service }} -o jsonpath='{.spec.clusterIP}')",
        "install": "cargo install --path {{ self.rootDir }}",
        "add": "cargo add --manifest-path {{ self.rootDir }}/Cargo.toml",
        "remove": "cargo remove --manifest-path {{ self.rootDir }}/Cargo.toml",
        "restart": "{{ self.rootDir }}/scripts/burndown.sh {{ self.rootDir }}; {{ self.rootDir }}/scripts/burnup.sh {{ self.rootDir }}",
        "build": "docker buildx build --platform linux/x86_64 -f {{ self.rootDir }}/Dockerfile.{{ env }} -t {{ {{ self.name }}-image }}:{{ tag }} --build-arg SERVICE_NAME={{ self.name }} --build-arg SERVICE_DIR=\"{{ self.rootDir }}\" --build-arg LIBS_DIR=\"{{ libs-dir }}\" .",
        "buildl": "docker build -f {{ self.rootDir }}/Dockerfile.local -t {{ {{ self.name }}-image }}:{{ local }} --build-arg SERVICE_NAME={{ self.name }} --build-arg SERVICE_DIR=\"{{ self.rootDir }}\" --build-arg LIBS_DIR=\"{{ libs-dir }}\" . && minikube image load {{ {{ self.name }}-image }}:{{ local }}",
        "buildp": "{{ self.commands.build }} && {{ self.commands.push }}",
        "cycle": "./manage stop {{ self.name }} && ./manage buildp {{ self.name }} && ./manage start {{ self.name }}",
        "cyclel": "{{ self.commands.stop }} && {{ self.commands.buildl }} && {{ self.commands.start }}",
        "push": "docker push {{ {{ self.name }}-image }}:{{ tag }}",
        "pusht": "docker push --all-tags {{ {{ self.name }}-image }}",
        "test": "cargo test --manifest-path {{ self.rootDir }}/Cargo.toml",
        "logs": "kubectl logs deployment/{{ {{ self.name }}-deployment }}",
        "watch": "kubectl logs deployment/{{ {{ self.name }}-deployment }} -f",
        "exec": "kubectl exec -it deployment/{{ {{ self.name }}-deployment }} -- bash",
        "code": "code {{ self.rootDir }}",
        "docs": "cargo doc --manifest-path {{ self.rootDir }}/Cargo.toml --open"
      },
      "dependencies": [
        "traefik",
        "nfs"
      ]
    },
    {
      "name": "datasets",
      "rootDir": "src/apis/datasets",
      "labels": ["api"],
      "commands": {
        "initialize": "chmod -R +x {{ self.rootDir }}/scripts && {{ self.commands.buildl }} && {{ self.commands.start }}",
        "get-nfs-ip": "kubectl get service {{ nfs-server-service }} -o jsonpath='{.spec.clusterIP}'",
        "start": "{{ self.rootDir }}/scripts/burnup.sh {{ self.rootDir }} $(kubectl get service {{ nfs-server-service }} -o jsonpath='{.spec.clusterIP}')",
        "stop": "{{ self.rootDir }}/scripts/burndown.sh {{ self.rootDir }} $(kubectl get service {{ nfs-server-service }} -o jsonpath='{.spec.clusterIP}')",
        "install": "cargo install --path {{ self.rootDir }}",
        "add": "cargo add --manifest-path {{ self.rootDir }}/Cargo.toml",
        "remove": "cargo remove --manifest-path {{ self.rootDir }}/Cargo.toml",
        "restart": "{{ self.rootDir }}/scripts/burndown.sh {{ self.rootDir }}; {{ self.rootDir }}/scripts/burnup.sh {{ self.rootDir }}",
        "build": "docker buildx build --platform linux/x86_64 -f {{ self.rootDir }}/Dockerfile.{{ env }} -t {{ {{ self.name }}-image }}:{{ tag }} --build-arg SERVICE_NAME={{ self.name }} --build-arg SERVICE_DIR=\"{{ self.rootDir }}\" --build-arg LIBS_DIR=\"{{ libs-dir }}\" .",
        "buildl": "docker build -f {{ self.rootDir }}/Dockerfile.local -t {{ {{ self.name }}-image }}:{{ local }} --build-arg SERVICE_NAME={{ self.name }} --build-arg SERVICE_DIR=\"{{ self.rootDir }}\" --build-arg LIBS_DIR=\"{{ libs-dir }}\" . && minikube image load {{ {{ self.name }}-image }}:{{ local }}",
        "buildp": "{{ self.commands.build }} && {{ self.commands.push }}",
        "cycle": "./manage stop {{ self.name }} && ./manage buildp {{ self.name }} && ./manage start {{ self.name }}",
        "cyclel": "{{ self.commands.stop }} && {{ self.commands.buildl }} && {{ self.commands.start }}",
        "push": "docker push {{ {{ self.name }}-image }}:{{ tag }}",
        "pusht": "docker push --all-tags {{ {{ self.name }}-image }}",
        "test": "cargo test --manifest-path {{ self.rootDir }}/Cargo.toml",
        "logs": "kubectl logs deployment/{{ {{ self.name }}-deployment }}",
        "watch": "kubectl logs deployment/{{ {{ self.name }}-deployment }} -f",
        "exec": "kubectl exec -it deployment/{{ {{ self.name }}-deployment }} -- bash",
        "code": "code {{ self.rootDir }}",
        "docs": "cargo doc --manifest-path {{ self.rootDir }}/Cargo.toml --open"
      },
      "dependencies": [
        "traefik",
        "nfs"
      ]
    },
    {
      "name": "inference",
      "rootDir": "src/apis/inference",
      "labels": ["api"],
      "commands": {
        "initialize": "chmod -R +x {{ self.rootDir }}/scripts && {{ self.commands.buildl }} && {{ self.commands.start }}",
        "start": "{{ self.rootDir }}/scripts/burnup.sh {{ self.rootDir }}",
        "stop": "{{ self.rootDir }}/scripts/burndown.sh {{ self.rootDir }}",
        "install": "cargo install --path {{ self.rootDir }}",
        "add": "cargo add --manifest-path {{ self.rootDir }}/Cargo.toml",
        "remove": "cargo remove --manifest-path {{ self.rootDir }}/Cargo.toml",
        "restart": "{{ self.rootDir }}/scripts/burndown.sh {{ self.rootDir }}; {{ self.rootDir }}/scripts/burnup.sh {{ self.rootDir }}",
        "build": "docker buildx build --platform linux/x86_64 -f {{ self.rootDir }}/Dockerfile.{{ env }} -t {{ {{ self.name }}-image }}:{{ tag }} --build-arg SERVICE_NAME={{ self.name }} --build-arg SERVICE_DIR=\"{{ self.rootDir }}\" --build-arg LIBS_DIR=\"{{ libs-dir }}\" .",
        "buildl": "docker build -f {{ self.rootDir }}/Dockerfile.local -t {{ {{ self.name }}-image }}:{{ local }} --build-arg SERVICE_NAME={{ self.name }} --build-arg SERVICE_DIR=\"{{ self.rootDir }}\" --build-arg LIBS_DIR=\"{{ libs-dir }}\" . && minikube image load {{ {{ self.name }}-image }}:{{ local }}",
        "buildp": "{{ self.commands.build }} && {{ self.commands.push }}",
        "cycle": "./manage stop {{ self.name }} && ./manage buildp {{ self.name }} && ./manage start {{ self.name }}",
        "cyclel": "{{ self.commands.stop }} && {{ self.commands.buildl }} && {{ self.commands.start }}",
        "push": "docker push {{ {{ self.name }}-image }}:{{ tag }}",
        "pusht": "docker push --all-tags {{ {{ self.name }}-image }}",
        "test": "cargo test --manifest-path {{ self.rootDir }}/Cargo.toml",
        "logs": "kubectl logs deployment/{{ {{ self.name }}-deployment }}",
        "watch": "kubectl logs deployment/{{ {{ self.name }}-deployment }} -f",
        "exec": "kubectl exec -it deployment/{{ {{ self.name }}-deployment }} -- bash",
        "code": "code {{ self.rootDir }}",
        "docs": "cargo doc --manifest-path {{ self.rootDir }}/Cargo.toml --open"
      },
      "dependencies": [
        "traefik",
        "nfs"
      ]
    },
    {
      "name": "training",
      "rootDir": "src/apis/training",
      "labels": ["api"],
      "commands": {
        "initialize": "chmod -R +x {{ self.rootDir }}/scripts && {{ self.commands.buildl }} && {{ self.commands.start }}",
        "start": "{{ self.rootDir }}/scripts/burnup.sh {{ self.rootDir }}",
        "stop": "{{ self.rootDir }}/scripts/burndown.sh {{ self.rootDir }}",
        "install": "cargo install --path {{ self.rootDir }}",
        "add": "cargo add --manifest-path {{ self.rootDir }}/Cargo.toml",
        "remove": "cargo remove --manifest-path {{ self.rootDir }}/Cargo.toml",
        "restart": "{{ self.rootDir }}/scripts/burndown.sh {{ self.rootDir }}; {{ self.rootDir }}/scripts/burnup.sh {{ self.rootDir }}",
        "build": "docker buildx build --platform linux/x86_64 -f {{ self.rootDir }}/Dockerfile.{{ env }} -t {{ {{ self.name }}-image }}:{{ tag }} --build-arg SERVICE_NAME={{ self.name }} --build-arg SERVICE_DIR=\"{{ self.rootDir }}\" --build-arg LIBS_DIR=\"{{ libs-dir }}\" .",
        "buildl": "docker build -f {{ self.rootDir }}/Dockerfile.local -t {{ {{ self.name }}-image }}:{{ local }} --build-arg SERVICE_NAME={{ self.name }} --build-arg SERVICE_DIR=\"{{ self.rootDir }}\" --build-arg LIBS_DIR=\"{{ libs-dir }}\" . && minikube image load {{ {{ self.name }}-image }}:{{ local }}",
        "buildp": "{{ self.commands.build }} && {{ self.commands.push }}",
        "cycle": "./manage stop {{ self.name }} && ./manage buildp {{ self.name }} && ./manage start {{ self.name }}",
        "cyclel": "{{ self.commands.stop }} && {{ self.commands.buildl }} && {{ self.commands.start }}",
        "push": "docker push {{ {{ self.name }}-image }}:{{ tag }}",
        "pusht": "docker push --all-tags {{ {{ self.name }}-image }}",
        "test": "cargo test --manifest-path {{ self.rootDir }}/Cargo.toml",
        "logs": "kubectl logs deployment/{{ {{ self.name }}-deployment }}",
        "watch": "kubectl logs deployment/{{ {{ self.name }}-deployment }} -f",
        "exec": "kubectl exec -it deployment/{{ {{ self.name }}-deployment }} -- bash",
        "code": "code {{ self.rootDir }}",
        "docs": "cargo doc --manifest-path {{ self.rootDir }}/Cargo.toml --open"
      },
      "dependencies": [
        "traefik",
        "nfs"
      ]
    },
    {
      "name": "nfs",
      "rootDir": "src/components/nfs",
      "labels": ["component"],
      "commands": {
        "initialize": "chmod -R +x {{ self.rootDir }}/scripts",
        "start": "{{ self.rootDir }}/scripts/burnup.sh {{ self.rootDir }}",
        "stop": "{{ self.rootDir }}/scripts/burndown.sh {{ self.rootDir }}",
        "restart": "{{ self.rootDir }}/scripts/burndown.sh {{ self.rootDir }}; {{ self.rootDir }}/scripts/burnup.sh {{ self.rootDir }}",
        "logs": "kubectl logs deployment/{{ {{ self.name }}-deployment }}",
        "watch": "kubectl logs deployment/{{ {{ self.name }}-deployment }} -f",
        "exec": "kubectl exec -it deployment/{{ {{ self.name }}-deployment }} --container=\"nfs-server\" -- sh",
        "code": "code src/components/{{ self.name }}",
        "docs": "cargo doc --manifest-path {{ self.rootDir }}/Cargo.toml --open"
      }
    },
    {
      "name": "traefik",
      "rootDir": "src/components/traefik",
      "labels": ["component"],
      "commands": {
        "initialize": "chmod -R +x {{ self.rootDir }}/scripts",
        "start": "{{ self.rootDir }}/scripts/burnup.sh {{ self.rootDir }}",
        "stop": "{{ self.rootDir }}/scripts/burndown.sh {{ self.rootDir }}",
        "restart": "{{ self.rootDir }}/scripts/burndown.sh {{ self.rootDir }}; {{ self.rootDir }}/scripts/burnup.sh {{ self.rootDir }}",
        "logs": "kubectl logs deployment/{{ {{ self.name }}-deployment }}",
        "watch": "kubectl logs deployment/{{ {{ self.name }}-deployment }} -f",
        "exec": "kubectl exec -it deployment/{{ {{ self.name }}-deployment }} -- sh",
        "expose": "minikube service expose mlhub-traefik-web-service --url",
        "code": "code src/components/{{ self.name }}",
        "docs": "cargo doc --manifest-path {{ self.rootDir }}/Cargo.toml --open"
      }
    },
    {
      "name": "artifact-ingester",
      "rootDir": "src/components/artifact-ingester",
      "labels": ["component", "worker"],
      "commands": {
        "initialize": "chmod -R +x {{ self.rootDir }}/scripts && {{ self.commands.buildl }} && {{ self.commands.start }}",
        "get-nfs-ip": "kubectl get service {{ nfs-server-service }} -o jsonpath='{.spec.clusterIP}'",
        "start": "{{ self.rootDir }}/scripts/burnup.sh {{ self.rootDir }} $(kubectl get service {{ nfs-server-service }} -o jsonpath='{.spec.clusterIP}')",
        "stop": "{{ self.rootDir }}/scripts/burndown.sh {{ self.rootDir }} $(kubectl get service {{ nfs-server-service }} -o jsonpath='{.spec.clusterIP}')",
        "install": "cargo install --path {{ self.rootDir }}",
        "add": "cargo add --manifest-path {{ self.rootDir }}/Cargo.toml",
        "remove": "cargo remove --manifest-path {{ self.rootDir }}/Cargo.toml",
        "restart": "{{ self.rootDir }}/scripts/burndown.sh {{ self.rootDir }}; {{ self.rootDir }}/scripts/burnup.sh {{ self.rootDir }}",
        "build": "docker buildx build --platform linux/x86_64 -f {{ self.rootDir }}/Dockerfile.{{ env }} -t {{ {{ self.name }}-image }}:{{ tag }} --build-arg SERVICE_NAME={{ self.name }} --build-arg SERVICE_DIR=\"{{ self.rootDir }}\" --build-arg LIBS_DIR=\"{{ libs-dir }}\" .",
        "buildl": "docker build -f {{ self.rootDir }}/Dockerfile.local -t {{ {{ self.name }}-image }}:{{ local }} --build-arg SERVICE_NAME={{ self.name }} --build-arg SERVICE_DIR=\"{{ self.rootDir }}\" --build-arg LIBS_DIR=\"{{ libs-dir }}\" . && minikube image load {{ {{ self.name }}-image }}:{{ local }}",
        "buildp": "{{ self.commands.build }} && {{ self.commands.push }}",
        "cycle": "./manage stop {{ self.name }} && ./manage buildp {{ self.name }} && ./manage start {{ self.name }}",
        "cyclel": "{{ self.commands.stop }} && {{ self.commands.buildl }} && {{ self.commands.start }}",
        "push": "docker push {{ {{ self.name }}-image }}:{{ tag }}",
        "pusht": "docker push --all-tags {{ {{ self.name }}-image }}",
        "test": "cargo test --manifest-path {{ self.rootDir }}/Cargo.toml",
        "logs": "kubectl logs deployment/{{ {{ self.name }}-deployment }}",
        "watch": "kubectl logs deployment/{{ {{ self.name }}-deployment }} -f",
        "exec": "kubectl exec -it deployment/{{ {{ self.name }}-deployment }} -- bash",
        "code": "code {{ self.rootDir }}",
        "docs": "cargo doc --manifest-path {{ self.rootDir }}/Cargo.toml --open"
      }
    },
    {
      "name": "artifact-publisher",
      "rootDir": "src/components/artifact-publisher",
      "labels": ["component", "worker"],
      "commands": {
        "initialize": "chmod -R +x {{ self.rootDir }}/scripts && {{ self.commands.buildl }} && {{ self.commands.start }}",
        "get-nfs-ip": "kubectl get service {{ nfs-server-service }} -o jsonpath='{.spec.clusterIP}'",
        "start": "{{ self.rootDir }}/scripts/burnup.sh {{ self.rootDir }} $(kubectl get service {{ nfs-server-service }} -o jsonpath='{.spec.clusterIP}')",
        "stop": "{{ self.rootDir }}/scripts/burndown.sh {{ self.rootDir }} $(kubectl get service {{ nfs-server-service }} -o jsonpath='{.spec.clusterIP}')",
        "install": "cargo install --path {{ self.rootDir }}",
        "add": "cargo add --manifest-path {{ self.rootDir }}/Cargo.toml",
        "remove": "cargo remove --manifest-path {{ self.rootDir }}/Cargo.toml",
        "restart": "{{ self.rootDir }}/scripts/burndown.sh {{ self.rootDir }}; {{ self.rootDir }}/scripts/burnup.sh {{ self.rootDir }}",
        "build": "docker buildx build --platform linux/x86_64 -f {{ self.rootDir }}/Dockerfile.{{ env }} -t {{ {{ self.name }}-image }}:{{ tag }} --build-arg SERVICE_NAME={{ self.name }} --build-arg SERVICE_DIR=\"{{ self.rootDir }}\" --build-arg LIBS_DIR=\"{{ libs-dir }}\" .",
        "buildl": "docker build -f {{ self.rootDir }}/Dockerfile.local -t {{ {{ self.name }}-image }}:{{ local }} --build-arg SERVICE_NAME={{ self.name }} --build-arg SERVICE_DIR=\"{{ self.rootDir }}\" --build-arg LIBS_DIR=\"{{ libs-dir }}\" . && minikube image load {{ {{ self.name }}-image }}:{{ local }}",
        "buildp": "{{ self.commands.build }} && {{ self.commands.push }}",
        "cycle": "./manage stop {{ self.name }} && ./manage buildp {{ self.name }} && ./manage start {{ self.name }}",
        "cyclel": "{{ self.commands.stop }} && {{ self.commands.buildl }} && {{ self.commands.start }}",
        "push": "docker push {{ {{ self.name }}-image }}:{{ tag }}",
        "pusht": "docker push --all-tags {{ {{ self.name }}-image }}",
        "test": "cargo test --manifest-path {{ self.rootDir }}/Cargo.toml",
        "logs": "kubectl logs deployment/{{ {{ self.name }}-deployment }}",
        "watch": "kubectl logs deployment/{{ {{ self.name }}-deployment }} -f",
        "exec": "kubectl exec -it deployment/{{ {{ self.name }}-deployment }} -- bash",
        "code": "code {{ self.rootDir }}",
        "docs": "cargo doc --manifest-path {{ self.rootDir }}/Cargo.toml --open"
      }
    },
    {
      "name": "artifact-mq",
      "rootDir": "src/components/artifact-mq",
      "labels": ["component"],
      "commands": {
        "initialize": "chmod -R +x {{ self.rootDir }}/scripts",
        "start": "{{ self.rootDir }}/scripts/burnup.sh {{ self.rootDir }}",
        "stop": "{{ self.rootDir }}/scripts/burndown.sh {{ self.rootDir }}",
        "restart": "{{ self.rootDir }}/scripts/burndown.sh {{ self.rootDir }}; {{ self.rootDir }}/scripts/burnup.sh {{ self.rootDir }}",
        "logs": "kubectl logs deployment/{{ {{ self.name }}-deployment }}",
        "expose": "kubectl port-forward svc/mlhub-{{ self.name }}-mgmt-service 15672:15672",
        "watch": "kubectl logs deployment/{{ {{ self.name }}-deployment }} -f",
        "exec": "kubectl exec -it deployment/{{ {{ self.name }}-deployment }} -- sh",
        "code": "code src/components/{{ self.name }}",
        "docs": "cargo doc --manifest-path {{ self.rootDir }}/Cargo.toml --open"
      }
    },
    {
      "name": "artifact-db",
      "rootDir": "src/components/artifact-db",
      "labels": ["component"],
      "commands": {
        "initialize": "chmod -R +x {{ self.rootDir }}/scripts",
        "start": "{{ self.rootDir }}/scripts/burnup.sh {{ self.rootDir }}",
        "stop": "{{ self.rootDir }}/scripts/burndown.sh {{ self.rootDir }}",
        "restart": "{{ self.rootDir }}/scripts/burndown.sh {{ self.rootDir }}; {{ self.rootDir }}/scripts/burnup.sh {{ self.rootDir }}",
        "logs": "kubectl logs deployment/{{ {{ self.name }}-deployment }}",
        "watch": "kubectl logs deployment/{{ {{ self.name }}-deployment }} -f",
        "expose": "kubectl port-forward svc/mlhub-{{ self.name }}-service 27017:27017", 
        "exec": "kubectl exec -it deployment/{{ {{ self.name }}-deployment }} -- bash",
        "code": "code src/components/{{ self.name }}",
        "gui": "open -a \"MongoDB Compass\"",
        "docs": "cargo doc --manifest-path {{ self.rootDir }}/Cargo.toml --open"
      }
    },
    {
      "name": "inference-db",
      "rootDir": "src/components/inference-db",
      "labels": ["component"],
      "commands": {
        "initialize": "chmod -R +x {{ self.rootDir }}/scripts",
        "start": "{{ self.rootDir }}/scripts/burnup.sh {{ self.rootDir }}",
        "stop": "{{ self.rootDir }}/scripts/burndown.sh {{ self.rootDir }}",
        "restart": "{{ self.rootDir }}/scripts/burndown.sh {{ self.rootDir }}; {{ self.rootDir }}/scripts/burnup.sh {{ self.rootDir }}",
        "logs": "kubectl logs deployment/{{ {{ self.name }}-deployment }}",
        "watch": "kubectl logs deployment/{{ {{ self.name }}-deployment }} -f",
        "exec": "kubectl exec -it deployment/{{ {{ self.name }}-deployment }} -- sh",
        "code": "code src/components/{{ self.name }}",
        "docs": "cargo doc --manifest-path {{ self.rootDir }}/Cargo.toml --open"
      }
    },
    {
      "name": "huggingface-client",
      "rootDir": "src/libs/huggingface-client",
      "labels": ["lib"],
      "commands": {
        "initialize": "",
        "compile": "cargo build --manifest-path src/libs/{{ self.name }}/Cargo.toml",
        "add": "cargo add --manifest-path {{ self.rootDir }}/Cargo.toml",
        "remove": "cargo remove --manifest-path {{ self.rootDir }}/Cargo.toml",
        "code": "code src/libs/{{ self.name }}",
        "docs": "cargo doc --manifest-path {{ self.rootDir }}/Cargo.toml --open"
      }
    },
    {
      "name": "shared",
      "rootDir": "src/libs/shared",
      "labels": ["lib"],
      "commands": {
        "initialize": "",
        "compile": "cargo build --manifest-path src/libs/{{ self.name }}/Cargo.toml",
        "add": "cargo add --manifest-path {{ self.rootDir }}/Cargo.toml",
        "test": "cargo test --manifest-path {{ self.rootDir }}/Cargo.toml",
        "remove": "cargo remove --manifest-path {{ self.rootDir }}/Cargo.toml",
        "code": "code src/libs/{{ self.name }}",
        "docs": "cargo doc --manifest-path {{ self.rootDir }}/Cargo.toml --open"
      }
    },
    {
      "name": "clients",
      "rootDir": "src/libs/clients",
      "labels": ["lib"],
      "commands": {
        "initialize": "",
        "compile": "cargo build --manifest-path src/libs/{{ self.name }}/Cargo.toml",
        "add": "cargo add --manifest-path {{ self.rootDir }}/Cargo.toml",
        "remove": "cargo remove --manifest-path {{ self.rootDir }}/Cargo.toml",
        "code": "code src/libs/{{ self.name }}",
        "docs": "cargo doc --manifest-path {{ self.rootDir }}/Cargo.toml --open"
      }
    },
    {
      "name": "client-provider",
      "rootDir": "src/libs/client-provider",
      "labels": ["lib"],
      "commands": {
        "initialize": "",
        "compile": "cargo build --manifest-path src/libs/{{ self.name }}/Cargo.toml",
        "add": "cargo add --manifest-path {{ self.rootDir }}/Cargo.toml",
        "remove": "cargo remove --manifest-path {{ self.rootDir }}/Cargo.toml",
        "code": "code src/libs/{{ self.name }}",
        "docs": "cargo doc --manifest-path {{ self.rootDir }}/Cargo.toml --open"
      }
    },
    {
      "name": "github-lfs-client",
      "rootDir": "src/libs/github-lfs-client",
      "labels": ["lib"],
      "commands": {
        "initialize": "",
        "compile": "cargo build --manifest-path src/libs/{{ self.name }}/Cargo.toml",
        "add": "cargo add --manifest-path {{ self.rootDir }}/Cargo.toml",
        "remove": "cargo remove --manifest-path {{ self.rootDir }}/Cargo.toml",
        "code": "code src/libs/{{ self.name }}",
        "docs": "cargo doc --manifest-path {{ self.rootDir }}/Cargo.toml --open"
      }
    },
    {
      "name": "git-lfs-client",
      "rootDir": "src/libs/git-lfs-client",
      "labels": ["lib"],
      "commands": {
        "initialize": "",
        "compile": "cargo build --manifest-path src/libs/{{ self.name }}/Cargo.toml",
        "add": "cargo add --manifest-path {{ self.rootDir }}/Cargo.toml",
        "remove": "cargo remove --manifest-path {{ self.rootDir }}/Cargo.toml",
        "code": "code src/libs/{{ self.name }}",
        "docs": "cargo doc --manifest-path {{ self.rootDir }}/Cargo.toml --open"
      }
    },
    {
      "name": "tacc-tapis-client",
      "rootDir": "src/libs/tacc-tapis-client",
      "labels": ["lib"],
      "commands": {
        "initialize": "",
        "compile": "cargo build --manifest-path src/libs/{{ self.name }}/Cargo.toml",
        "add": "cargo add --manifest-path {{ self.rootDir }}/Cargo.toml",
        "remove": "cargo remove --manifest-path {{ self.rootDir }}/Cargo.toml",
        "code": "code src/libs/{{ self.name }}",
        "docs": "cargo doc --manifest-path {{ self.rootDir }}/Cargo.toml --open"
      }
    },
    {
      "name": "s3-client",
      "rootDir": "src/libs/s3-client",
      "labels": ["lib"],
      "commands": {
        "initialize": "",
        "compile": "cargo build --manifest-path src/libs/{{ self.name }}/Cargo.toml",
        "add": "cargo add --manifest-path {{ self.rootDir }}/Cargo.toml",
        "remove": "cargo remove --manifest-path {{ self.rootDir }}/Cargo.toml",
        "code": "code src/libs/{{ self.name }}",
        "docs": "cargo doc --manifest-path {{ self.rootDir }}/Cargo.toml --open"
      }
    },
    {
      "name": "patra-client",
      "rootDir": "src/libs/patra-client",
      "labels": ["lib"],
      "commands": {
        "initialize": "",
        "compile": "cargo build --manifest-path src/libs/{{ self.name }}/Cargo.toml",
        "add": "cargo add --manifest-path {{ self.rootDir }}/Cargo.toml",
        "remove": "cargo remove --manifest-path {{ self.rootDir }}/Cargo.toml",
        "code": "code src/libs/{{ self.name }}",
        "docs": "cargo doc --manifest-path {{ self.rootDir }}/Cargo.toml --open"
      }
    },
    {
      "name": "cli",
      "rootDir": "src/bins/cli",
      "labels": ["bin", "cli"],
      "commands": {
        "initialize": "",
        "compile": "cargo build --manifest-path src/libs/{{ self.name }}/Cargo.toml",
        "add": "cargo add --manifest-path {{ self.rootDir }}/Cargo.toml",
        "remove": "cargo remove --manifest-path {{ self.rootDir }}/Cargo.toml",
        "code": "code {{ bins-dir }}/{{ self.name }}",
        "docs": "cargo doc --manifest-path {{ self.rootDir }}/Cargo.toml --open"
      }
    }
  ]
}