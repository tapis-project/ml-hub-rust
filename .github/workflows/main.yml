name: Tapis MLHub CI

on:
  push:
    branches: [ dev, staging, main ]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ dev, staging, main ]

jobs:
  Set_Image_Tag:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set_image_tag.outputs.image_tag }}
    steps:
      - id: set_image_tag
        name: Set_image
        shell: bash
        run: |
          # If the $GITHUB_REF contains "/refs/tags/v", then the "v" needs to be
          # removed from the $GITHUB_REF_NAME to form a proper image tag
          if [[ $GITHUB_REF =~ "/refs/tags/v"  ]]; then 
            echo version=$(echo $GITHUB_REF_NAME | sed -e 's!v!!') >> $GITHUB_OUTPUT
          else
            echo "image_tag=$GITHUB_REF_NAME" >> $GITHUB_OUTPUT;
          fi

  Models_API:
    needs:
      - Set_Image_Tag
    name: Models_Compile_Test_Build_Push
    runs-on: ubuntu-latest
    steps:
      # Checkout the code
      - name: Checkout
        uses: actions/checkout@v3

      # Resolve all diffs if any for this api
      - id: git-diff
        uses: technote-space/get-diff-action@v6
        with:
          PATTERNS: |
            src/models/**/*

      # Setup rust
      - name: Rust setup
        run: rustup toolchain install stable
        # if: steps.git-diff.outputs.diff

      # # Compile and run tests
      # - name: Test
      #   run: "./manage test models"
      #   # if: steps.git-diff.outputs.diff

      # # Compile the release of the api
      # - name: Compile
      #   run: "./manage install models"
      #   # if: steps.git-diff.outputs.diff
      
      - name: debug
        run: "mkdir src/models/target/release && touch src/models/target/release/models"
        # if: steps.git-diff.outputs.diff

      # Log into dockerhub with CIC credentials
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.CIC_DOCKERHUB_USERNAME }}
          password: ${{ secrets.CIC_DOCKERHUB_ACCESS_TOKEN }}
        # if: steps.git-diff.outputs.diff

      # Remove the docker ignore file so that the gh actions Dockerfile will 
      # permit the target/release/models binary to be copied into the image
      - name: Delete docker ignore
        run: rm src/models/.dockerignore
        # if: steps.git-diff.outputs.diff

      # Build the image for the given branch or git tag
      - name: Build_Image
        run: "./manage build models -v -t scope .gh-actions -t tag ${{ needs.Set_Image_Tag.outputs.image_tag }}"
        # if: steps.git-diff.outputs.diff

      # # Push the all tags for the image
      # - name: Push_All_Tags
      #   run: docker push --all-tags tapis/models-api
      #   # if: steps.git-diff.outputs.diff
      